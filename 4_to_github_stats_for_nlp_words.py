# -*- coding: utf-8 -*-
"""4. To Github  Stats for  NLP words.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Vhhyjtv2D4ADrQmIeYLUc4Q4EyJHtqzA

Word2Vec In buit similarity measure
"""

pip install nltk

import nltk
nltk.download([
     "state_union",
     "vader_lexicon",
     "stopwords",
])

nltk.download('all')

"""# Analysis of files"""

model_bow = gensim.models.Word2Vec(textTrainingInput,  window = 5)
len(textTrainingInput)

print("Similarity Word2Vec: ", model_bow.wv.similarity('climate', 'storms'))

vocabulary = model_bow.wv.vocab
len(vocabulary)

model_bow

similar_words = model_bow.wv.most_similar("climate", topn=20)
for w in similar_words:
  print(w)

similar_words = model_bow.wv.most_similar("storms", topn=20)
for w in similar_words:
  print(w)

similar_words = model_bow.wv.most_similar("weather", topn=20)
for w in similar_words:
  print(w)

similar_words = model_bow.wv.most_similar("climate", topn=20)
for w in similar_words:
  print(w)

max = 0
i = 0 
index = 0

for w in similar_words:
  similarity = model_bow.wv.similarity("climate", w[0])
  if max <= similarity:
    max =  similarity
    index = i
  print("similarity between: ",  w[0],  " and ", "climate", " is ",  similarity)
  i = i + 1 

print("Maximum Orietation Towards", similar_words[index][0], " " , max)

!pip install textblob

#word in sentence, the first sentence having this word
def findSentenceWithWord(findword):
  for sent in allSentences:
    if(sent.find(findword)>0):
      return sent
  return 0

#word in sentence, the all sentence having this word
def findAllSentenceWithWord(findword):
  outputSentences = ""
  numSent = 0
  for sent in allSentences:
    if(sent.find(findword)>0):
      numSent += 1
      outputSentences =  outputSentences+ " " + sent
  return outputSentences, numSent

print("output is", findAllSentenceWithWord("youth"))

from textblob import TextBlob

sentimentObj = TextBlob("the climate will be fine once again")
print(sentimentObj.sentiment.polarity)

similar_words = model_bow.wv.most_similar("climate", topn=20)
 
max = 0
i = 0 
index = 0
total_Sentiment = 0

for w in similar_words:
  sentenceWord = findSentenceWithWord(w[0])
  sentimentObj = TextBlob(sentenceWord)
  sentiment_w = sentimentObj.sentiment.polarity
  total_Sentiment += sentiment_w
  if max <= sentiment_w:
    max =  sentiment_w
    index = i
  print("Sentiment of  ",  w[0],  " in climate data", " is ",  sentiment_w)
  #print("Sentence is", sentenceWord)
  i = i + 1

print( "Total sentiment is", total_Sentiment )
print( "Average total sentiment is", total_Sentiment/len(similar_words) )
print("Maximum  sentiment word is", similar_words[index][0] )

similar_words = model_bow.wv.most_similar("weather", topn=20)
 
max = 0
i = 0 
index = 0
total_Sentiment = 0

for w in similar_words:
  sentenceWord, numSent = findAllSentenceWithWord(w[0])
  sentimentObj = TextBlob(str(sentenceWord))
  sentiment_w = sentimentObj.sentiment.polarity
  total_Sentiment += sentiment_w
  if max <= sentiment_w:
    max =  sentiment_w
    index = i
  print("Sentiment of  ",  w[0],  " in climate data", " is ",  sentiment_w)
  #print("Sentence is", sentenceWord)
  i = i + 1

print( "Total sentiment in all sentences: ", total_Sentiment)
print( "Average sentiment is", total_Sentiment/len(similar_words) )
print("Maximum  sentiment word is", similar_words[index][0] )

ll=open('/content/drive/MyDrive/IR/10.txt')
print(ll.read())

similar_words = model_bow.wv.most_similar("climate", topn=20)
 
max = 0
i = 0 
index = 0
total_Sentiment = 0

for w in similar_words:
  sentenceWord, numSent = findAllSentenceWithWord(w[0])
  sentimentObj = TextBlob(sentenceWord)
  sentiment_w = sentimentObj.sentiment.polarity
  total_Sentiment += sentiment_w
  if max <= sentiment_w:
    max =  sentiment_w
    index = i
  print("Sentiment of  ",  w[0],  " in climate data", " is ",  sentiment_w)
  #print("Sentence is", sentenceWord)
  i = i + 1
  
print( "Total sentiment in all sentences: ", total_Sentiment)
print( "Average sentiment is", total_Sentiment/len(similar_words) )
print("Maximum  sentiment word is", similar_words[index][0] )

def isSpecialCharacter(word):
  for character in word:
    if not (character.isalpha() or character.isdigit() ):
      return True
  return False

"""# Top Frequency Words Sentiment Analysis"""

# Compute the frequencies of words

print(wordList[1])
wordsFiltered = wordList
wordsFiltered = [w for w in wordsFiltered if not(isSpecialCharacter(w))]
wordsFiltered = [w for w in wordsFiltered if w.lower() not in stopwords]
wordsFiltered = [w.lower() for w in wordsFiltered]


dict_word_freq = {}
for word in wordsFiltered:
  if (word in dict_word_freq):
    dict_word_freq[word] += 1
  else:
    dict_word_freq[word] = 1
 
print(dict_word_freq)

for key, value in dict_word_freq.items():
  print ("% s : % d"%(key, value))

from heapq import nlargest

def getTopNwords(N):
  print("The original dictionary is : " + str(dict_word_freq))
  top_N = nlargest(N, dict_word_freq, key = dict_word_freq.get)
  print("The top N value pairs are  ")
  return top_N
  
#print(dict_word_freq.get(top_N[1]))

import numpy as np
import matplotlib.pyplot as plt
 

top_dict_word_freq = {}
topNwords =getTopNwords(25)
for word in topNwords:
    top_dict_word_freq[word]  =  dict_word_freq.get(word)


topwords = list(top_dict_word_freq.keys())
frequencies = list(top_dict_word_freq.values())

highest_freq_words = list(top_dict_word_freq.keys())

max = 0
i = 0 
index = 0
total_Sentiment = 0

for w in highest_freq_words:
  sentenceWord, numSent = findAllSentenceWithWord(w[0])
  sentimentObj = TextBlob(sentenceWord)
  sentiment_w = sentimentObj.sentiment.polarity
  total_Sentiment += sentiment_w
  if max <= sentiment_w:
    max =  sentiment_w
    index = i
  print("Sentiment of  ",  w,  " in climate data", " is ",  sentiment_w)
  i = i + 1
  
print( "Total sentiment in all sentences: ", total_Sentiment)
print( "Average sentiment is", total_Sentiment/len(similar_words) )
print("Maximum  sentiment word is", highest_freq_words[index] )

highest_freq_words = list(top_dict_word_freq.keys())

max = 0
i = 0 
index = 0
total_Sentiment = 0

for w in highest_freq_words:
  sentenceWord = findSentenceWithWord(w[0])
  sentimentObj = TextBlob(sentenceWord)
  sentiment_w = sentimentObj.sentiment.polarity
  total_Sentiment += sentiment_w
  if max <= sentiment_w:
    max =  sentiment_w
    index = i
  print("Sentiment of  ",  w,  " in climate data", " is ",  sentiment_w)
  i = i + 1
  
print( "Total sentiment in all sentences: ", total_Sentiment)
print( "Average sentiment is", total_Sentiment/len(similar_words) )
print("Maximum  sentiment word is", highest_freq_words[index] )